generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model auth_user {
  id_user    Int         @id @default(autoincrement())
  username   String      @unique(map: "username") @db.VarChar(50)
  password   String      @db.VarChar(100)
  level      Int         @db.TinyInt
  created_at DateTime    @default(now()) @db.DateTime(0)
  deleted_at DateTime?   @db.DateTime(0)
  s_company  s_company[]
}

model d_dn {
  id_dn       Int           @id @default(autoincrement())
  id_po       Int
  id_doc      Int
  created_at  DateTime      @default(now()) @db.DateTime(0)
  deleted_at  DateTime?     @db.DateTime(0)
  d_doc       d_doc         @relation(fields: [id_doc], references: [id_doc], onDelete: Cascade, map: "d_dn_ibfk_1")
  d_po        d_po          @relation(fields: [id_po], references: [id_po], onDelete: Cascade, map: "d_dn_ibfk_2")
  d_dn_detail d_dn_detail[]

  @@index([id_doc], map: "id_doc")
  @@index([id_po], map: "id_po")
}

model d_dn_detail {
  id_dn_detail Int       @id @default(autoincrement())
  id_dn        Int
  id_order     Int
  created_at   DateTime  @default(now()) @db.DateTime(0)
  deleted_at   DateTime? @db.DateTime(0)
  d_dn         d_dn      @relation(fields: [id_dn], references: [id_dn], onDelete: Cascade, map: "d_dn_detail_ibfk_2")
  d_order      d_order   @relation(fields: [id_order], references: [id_order], onDelete: Cascade, map: "d_dn_detail_ibfk_3")

  @@index([id_dn], map: "id_dn")
  @@index([id_order], map: "id_order")
}

model d_item {
  id_item       Int             @id @default(autoincrement())
  id_company    Int
  id_category   Int
  serial_number String          @db.VarChar(50)
  name          String          @db.VarChar(50)
  desc          String          @db.Text
  quantity      Float           @db.Float
  unit          String          @db.VarChar(50)
  created_at    DateTime        @default(now()) @db.DateTime(0)
  deleted_at    DateTime?       @db.DateTime(0)
  s_company     s_company       @relation(fields: [id_company], references: [id_company], onDelete: Cascade, map: "d_item_ibfk_1")
  ref_category  ref_category    @relation(fields: [id_category], references: [id_category], onDelete: Cascade, map: "d_item_ibfk_3")
  d_item_detail d_item_detail[]
  d_order       d_order[]

  @@index([id_category], map: "id_category")
  @@index([id_company], map: "id_user")
}

model d_item_detail {
  id_item_detail Int         @id @default(autoincrement())
  id_item        Int
  id_po_detail   Int
  d_item         d_item      @relation(fields: [id_item], references: [id_item], onDelete: Cascade, map: "d_item_detail_ibfk_1")
  d_po_detail    d_po_detail @relation(fields: [id_po_detail], references: [id_po_detail], onDelete: Cascade, map: "d_item_detail_ibfk_2")

  @@index([id_item], map: "id_item")
  @@index([id_po_detail], map: "id_po_detail")
}

model d_order {
  id_order                                Int           @id @default(autoincrement())
  order_from                              Int
  order_to                                Int
  id_item                                 Int
  order_number                            String        @db.VarChar(50)
  quantity                                Float         @db.Float
  processed                               Boolean
  created_at                              DateTime      @default(now()) @db.DateTime(0)
  deleted_at                              DateTime?     @db.DateTime(0)
  d_item                                  d_item        @relation(fields: [id_item], references: [id_item], onDelete: Cascade, map: "d_order_ibfk_1")
  s_company_d_order_order_fromTos_company s_company     @relation("d_order_order_fromTos_company", fields: [order_from], references: [id_company], onDelete: Cascade, map: "d_order_ibfk_2")
  s_company_d_order_order_toTos_company   s_company     @relation("d_order_order_toTos_company", fields: [order_to], references: [id_company], onDelete: Cascade, map: "d_order_ibfk_3")
  d_dn_detail                             d_dn_detail[]
  d_po_detail                             d_po_detail[]

  @@index([id_item], map: "id_item")
  @@index([order_from], map: "order_from")
  @@index([order_to], map: "order_to")
}

model d_po {
  id_po                                Int           @id @default(autoincrement())
  id_doc                               Int
  order_from                           Int
  order_to                             Int
  po_number                            String        @db.VarChar(50)
  status                               Int           @db.TinyInt
  deadline                             DateTime      @db.Date
  finished_at                          DateTime?     @db.DateTime(0)
  created_at                           DateTime      @default(now()) @db.DateTime(0)
  deleted_at                           DateTime?     @db.DateTime(0)
  d_doc                                d_doc         @relation(fields: [id_doc], references: [id_doc], onDelete: Cascade, map: "d_po_ibfk_2")
  s_company_d_po_order_fromTos_company s_company     @relation("d_po_order_fromTos_company", fields: [order_from], references: [id_company], onDelete: Cascade, map: "d_po_ibfk_3")
  s_company_d_po_order_toTos_company   s_company     @relation("d_po_order_toTos_company", fields: [order_to], references: [id_company], onDelete: Cascade, map: "d_po_ibfk_4")
  d_dn                                 d_dn[]
  d_po_detail                          d_po_detail[]

  @@index([id_doc], map: "id_doc")
  @@index([order_from], map: "order_from")
  @@index([order_to], map: "order_to")
}

model d_po_detail {
  id_po_detail  Int             @id @default(autoincrement())
  id_po         Int
  id_order      Int
  quantity      Float           @db.Float
  note          String?         @db.Text
  note_po       String?         @db.VarChar(50)
  created_at    DateTime        @default(now()) @db.DateTime(0)
  deleted_at    DateTime?       @db.DateTime(0)
  d_po          d_po            @relation(fields: [id_po], references: [id_po], onDelete: Cascade, map: "d_po_detail_ibfk_1")
  d_order       d_order         @relation(fields: [id_order], references: [id_order], onDelete: Cascade, map: "d_po_detail_ibfk_3")
  d_item_detail d_item_detail[]

  @@index([id_order], map: "id_order")
  @@index([id_po], map: "id_po")
}

model s_company {
  id_company                            Int        @id @default(autoincrement())
  id_user                               Int
  name                                  String     @db.VarChar(50)
  address                               String     @db.VarChar(100)
  phone                                 String     @db.VarChar(20)
  created_at                            DateTime   @default(now()) @db.DateTime(0)
  deleted_at                            DateTime?  @db.DateTime(0)
  auth_user                             auth_user  @relation(fields: [id_user], references: [id_user], onDelete: Cascade, map: "s_company_ibfk_1")
  d_item                                d_item[]
  d_notification_change                 d_notification_change[]
  d_notification                        d_notification[]
  d_order_d_order_order_fromTos_company d_order[]  @relation("d_order_order_fromTos_company")
  d_order_d_order_order_toTos_company   d_order[]  @relation("d_order_order_toTos_company")
  d_po_d_po_order_fromTos_company       d_po[]     @relation("d_po_order_fromTos_company")
  d_po_d_po_order_toTos_company         d_po[]     @relation("d_po_order_toTos_company")

  @@index([id_user], map: "id_user")
}

model d_doc {
  id_doc        Int       @id @default(autoincrement())
  name          String?   @db.VarChar(50)
  original_name String?   @db.VarChar(50)
  mime          String?   @db.VarChar(75)
  path          String?   @db.VarChar(200)
  created_at    DateTime? @default(now()) @db.DateTime(0)
  deleted_at    DateTime? @db.DateTime(0)
  d_dn          d_dn[]
  d_po          d_po[]
}

model ref_category {
  id_category Int       @id @default(autoincrement())
  name        String    @db.VarChar(20)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  deleted_at  DateTime? @db.DateTime(0)
  d_item      d_item[]
}

model d_notification_object {
  id_notification_object  Int       @id @default(autoincrement())
  entity_type             Int
  entity_id               Int
  status                  Int       @db.TinyInt
  created_at              DateTime  @default(now()) @db.DateTime(0)
  d_notification_change   d_notification_change[]
  d_notification          d_notification[]
}

model d_notification_change {
  id_notification_change  Int                     @id @default(autoincrement())
  id_notification_object  Int
  id_company              Int
  status                  Int                     @db.TinyInt
  d_notification_object   d_notification_object   @relation(fields: [id_notification_object], references: [id_notification_object], onDelete: Cascade, map: "d_notification_change_ibfk_1")
  s_company               s_company               @relation(fields: [id_company], references: [id_company], onDelete: Cascade, map: "d_notification_change_ibfk_2")

  @@index([id_notification_object], map: "id_notification_object")
  @@index([id_company], map: "id_company")
}

model d_notification {
  id_notification         Int                     @id @default(autoincrement())
  id_notification_object  Int
  id_company              Int
  status                  Int                     @db.TinyInt
  d_notification_object   d_notification_object   @relation(fields: [id_notification_object], references: [id_notification_object], onDelete: Cascade, map: "d_notification_ibfk_1")
  s_company               s_company               @relation(fields: [id_company], references: [id_company], onDelete: Cascade, map: "d_notification_ibfk_2")

  @@index([id_notification_object], map: "id_notification_object")
  @@index([id_company], map: "id_company")
}